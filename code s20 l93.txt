
PythonSelFramework > Tests > test_e2e.py
PythonSelFramework > Tests > test_e2e.py 2
PythonSelFramework > Tests > test_e2e.py 3


from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from Utilities.BaseClass import BaseClass

# you should use <self> method when defined something under Class
class TestOne(BaseClass):
    def test_e2e(self):
        self.driver.find_element_by_css_selector("a[href*='shop']").click()
        cards = self.driver.find_elements_by_css_selector(".card-title a")
        i = -1
        for card in cards:
            i = i + 1
            cardText = card.text
            print(cardText)
            if cardText == "Blackberry":
                self.driver.find_elements_by_css_selector(".card-footer button")[i].click()

        self.driver.find_element_by_css_selector("a[class*='btn-primary']").click()

        self.driver.find_element_by_xpath("//button[@class='btn btn-success']").click()
        # Ichanged ID <country> on CSS Selector <input[type='text']>
        self.driver.find_element_by_css_selector("input[type='text']").send_keys("ind")
        # time.sleep(5)
        element = WebDriverWait(self.driver, 10).until(EC.presence_of_element_located((By.LINK_TEXT, "India")))
        self.driver.find_element_by_link_text("India").click()
        self.driver.find_element_by_xpath("//div[@class='checkbox checkbox-primary']").click()
        self.driver.find_element_by_css_selector("[type='submit']").click()
        textMatch = self.driver.find_element_by_css_selector("[class*='alert-success']").click()

        assert ("Success! Thank you! Your order will be delivered in next few weeks :-)." in textMatch)




PythonSelFramework > Tests > conftest.py

import pytest
import time

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC


# driver send to class object, assigning all local driver

def pytest_addoption(parser):
    parser.addoption(
        "--browser_name", action="store", default="chrome")


@pytest.fixture(scope="class")
def setup(request):  # request is instance for fixture
    browser_name = request.config.getoption("browser_name")  # add this line with code that up
    if browser_name == "chrome":
        driver = webdriver.Chrome(executable_path="C:\Selenium.Test\chromedriver.exe")
    elif browser_name == "firefox":
        driver = webdriver.Firefox(executable_path="C:\Selenium.Test\geckodriver.exe")
    # elif browser_name == "IE":
        # code for IE invocation
    driver.get("https://rahulshettyacademy.com/angularpractice/")
    driver.maximize_window()
    request.cls.driver = driver
    yield
    # driver.close()



Utilities > BaseClass.py

import pytest


@pytest.mark.usefixtures("setup")
class BaseClass:
    pass



